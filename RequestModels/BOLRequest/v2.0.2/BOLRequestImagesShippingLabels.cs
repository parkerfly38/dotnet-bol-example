/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestImagesShippingLabels
    /// </summary>
    [DataContract]
        public partial class BOLRequestImagesShippingLabels :  IEquatable<BOLRequestImagesShippingLabels>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestImagesShippingLabels" /> class.
        /// </summary>
        /// <param name="format">Specifies the printer format type for the labels.  Required when images.includeShippingLabels is true.  Valid Values: See the Shipping_Label_Formats schema at the bottom of this page. .</param>
        /// <param name="quantity">Specifies the quantity of pages desired.   Required when images.includeShippingLabels is true. .</param>
        /// <param name="position">Specifies the starting position for the shipping labels.  Required when images.shippingLabel is Avery.   Valid Values: * 1 - 6 .</param>
        public BOLRequestImagesShippingLabels(string format = default(string), int? quantity = default(int?), int? position = default(int?))
        {
            this.Format = format;
            this.Quantity = quantity;
            this.Position = position;
        }
        
        /// <summary>
        /// Specifies the printer format type for the labels.  Required when images.includeShippingLabels is true.  Valid Values: See the Shipping_Label_Formats schema at the bottom of this page. 
        /// </summary>
        /// <value>Specifies the printer format type for the labels.  Required when images.includeShippingLabels is true.  Valid Values: See the Shipping_Label_Formats schema at the bottom of this page. </value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Specifies the quantity of pages desired.   Required when images.includeShippingLabels is true. 
        /// </summary>
        /// <value>Specifies the quantity of pages desired.   Required when images.includeShippingLabels is true. </value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Specifies the starting position for the shipping labels.  Required when images.shippingLabel is Avery.   Valid Values: * 1 - 6 
        /// </summary>
        /// <value>Specifies the starting position for the shipping labels.  Required when images.shippingLabel is Avery.   Valid Values: * 1 - 6 </value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestImagesShippingLabels {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestImagesShippingLabels);
        }

        /// <summary>
        /// Returns true if BOLRequestImagesShippingLabels instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestImagesShippingLabels to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestImagesShippingLabels input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

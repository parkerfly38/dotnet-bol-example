/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestCommoditiesHandlingUnits
    /// </summary>
    [DataContract]
        public partial class BOLRequestCommoditiesHandlingUnits :  IEquatable<BOLRequestCommoditiesHandlingUnits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestCommoditiesHandlingUnits" /> class.
        /// </summary>
        /// <param name="count">Number of handling units being described (required).</param>
        /// <param name="type">Type of the handling units being described  Valid Values: See the Handling_Unit_Types schema at the bottom of this page  (required).</param>
        /// <param name="tareWeight">Weight of the skids/pallets/slips used in the shipment..</param>
        /// <param name="weight">Total weight for the specified handling units. (required).</param>
        /// <param name="weightUnit">The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                                     .</param>
        /// <param name="length">The length of the handling units being described..</param>
        /// <param name="width">The width of the handling units being described..</param>
        /// <param name="height">The height of the handling units being described..</param>
        /// <param name="dimensionsUnit">The unit of measurement for dimensions.  Defaults to Inches (Imperial) if not passed.  Valid Values: Inches or Centimeters .</param>
        /// <param name="stackable">Identifies whether or not the freight being described can be stacked on one another.  Default is false. .</param>
        /// <param name="lineItems">lineItems.</param>
        public BOLRequestCommoditiesHandlingUnits(int? count = default(int?), string type = default(string), int? tareWeight = default(int?), int? weight = default(int?), string weightUnit = default(string), int? length = default(int?), int? width = default(int?), int? height = default(int?), string dimensionsUnit = default(string), bool? stackable = default(bool?), List<BOLRequestCommoditiesLineItems> lineItems = default(List<BOLRequestCommoditiesLineItems>))
        {
            // to ensure "count" is required (not null)
            if (count == null)
            {
                throw new InvalidDataException("count is a required property for BOLRequestCommoditiesHandlingUnits and cannot be null");
            }
            else
            {
                this.Count = count;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BOLRequestCommoditiesHandlingUnits and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for BOLRequestCommoditiesHandlingUnits and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            this.TareWeight = tareWeight;
            this.WeightUnit = weightUnit;
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.DimensionsUnit = dimensionsUnit;
            this.Stackable = stackable;
            this.LineItems = lineItems;
        }
        
        /// <summary>
        /// Number of handling units being described
        /// </summary>
        /// <value>Number of handling units being described</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Type of the handling units being described  Valid Values: See the Handling_Unit_Types schema at the bottom of this page 
        /// </summary>
        /// <value>Type of the handling units being described  Valid Values: See the Handling_Unit_Types schema at the bottom of this page </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Weight of the skids/pallets/slips used in the shipment.
        /// </summary>
        /// <value>Weight of the skids/pallets/slips used in the shipment.</value>
        [DataMember(Name="tareWeight", EmitDefaultValue=false)]
        public int? TareWeight { get; set; }

        /// <summary>
        /// Total weight for the specified handling units.
        /// </summary>
        /// <value>Total weight for the specified handling units.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                                     
        /// </summary>
        /// <value>The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                                     </value>
        [DataMember(Name="weightUnit", EmitDefaultValue=false)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// The length of the handling units being described.
        /// </summary>
        /// <value>The length of the handling units being described.</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int? Length { get; set; }

        /// <summary>
        /// The width of the handling units being described.
        /// </summary>
        /// <value>The width of the handling units being described.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// The height of the handling units being described.
        /// </summary>
        /// <value>The height of the handling units being described.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// The unit of measurement for dimensions.  Defaults to Inches (Imperial) if not passed.  Valid Values: Inches or Centimeters 
        /// </summary>
        /// <value>The unit of measurement for dimensions.  Defaults to Inches (Imperial) if not passed.  Valid Values: Inches or Centimeters </value>
        [DataMember(Name="dimensionsUnit", EmitDefaultValue=false)]
        public string DimensionsUnit { get; set; }

        /// <summary>
        /// Identifies whether or not the freight being described can be stacked on one another.  Default is false. 
        /// </summary>
        /// <value>Identifies whether or not the freight being described can be stacked on one another.  Default is false. </value>
        [DataMember(Name="stackable", EmitDefaultValue=false)]
        public bool? Stackable { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<BOLRequestCommoditiesLineItems> LineItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestCommoditiesHandlingUnits {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TareWeight: ").Append(TareWeight).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  DimensionsUnit: ").Append(DimensionsUnit).Append("\n");
            sb.Append("  Stackable: ").Append(Stackable).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestCommoditiesHandlingUnits);
        }

        /// <summary>
        /// Returns true if BOLRequestCommoditiesHandlingUnits instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestCommoditiesHandlingUnits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestCommoditiesHandlingUnits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TareWeight == input.TareWeight ||
                    (this.TareWeight != null &&
                    this.TareWeight.Equals(input.TareWeight))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.WeightUnit == input.WeightUnit ||
                    (this.WeightUnit != null &&
                    this.WeightUnit.Equals(input.WeightUnit))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.DimensionsUnit == input.DimensionsUnit ||
                    (this.DimensionsUnit != null &&
                    this.DimensionsUnit.Equals(input.DimensionsUnit))
                ) && 
                (
                    this.Stackable == input.Stackable ||
                    (this.Stackable != null &&
                    this.Stackable.Equals(input.Stackable))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TareWeight != null)
                    hashCode = hashCode * 59 + this.TareWeight.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightUnit != null)
                    hashCode = hashCode * 59 + this.WeightUnit.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.DimensionsUnit != null)
                    hashCode = hashCode * 59 + this.DimensionsUnit.GetHashCode();
                if (this.Stackable != null)
                    hashCode = hashCode * 59 + this.Stackable.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

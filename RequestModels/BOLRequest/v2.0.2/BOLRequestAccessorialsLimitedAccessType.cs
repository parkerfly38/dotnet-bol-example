/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// Optional attribute to indicate the limited access type when accessorial code LTDAP or LTDAD is present in the accessorial.codes list. 
    /// </summary>
    [DataContract]
        public partial class BOLRequestAccessorialsLimitedAccessType :  IEquatable<BOLRequestAccessorialsLimitedAccessType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestAccessorialsLimitedAccessType" /> class.
        /// </summary>
        /// <param name="origin">Optional attribute to indicate the limited access type when accessorial code LTDAP is present in the accessorial.codes list.   Valid Values: See the Limited_Acess_Types schema at the bottom of this page.  .</param>
        /// <param name="destination">Optional attribute to indicate the limited access type when accessorial code LTDAD is present in the accessorial.codes list.   Valid Values: See the Limited_Acess_Types schema at the bottom of this page.  .</param>
        public BOLRequestAccessorialsLimitedAccessType(string origin = default(string), string destination = default(string))
        {
            this.Origin = origin;
            this.Destination = destination;
        }
        
        /// <summary>
        /// Optional attribute to indicate the limited access type when accessorial code LTDAP is present in the accessorial.codes list.   Valid Values: See the Limited_Acess_Types schema at the bottom of this page.  
        /// </summary>
        /// <value>Optional attribute to indicate the limited access type when accessorial code LTDAP is present in the accessorial.codes list.   Valid Values: See the Limited_Acess_Types schema at the bottom of this page.  </value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// Optional attribute to indicate the limited access type when accessorial code LTDAD is present in the accessorial.codes list.   Valid Values: See the Limited_Acess_Types schema at the bottom of this page.  
        /// </summary>
        /// <value>Optional attribute to indicate the limited access type when accessorial code LTDAD is present in the accessorial.codes list.   Valid Values: See the Limited_Acess_Types schema at the bottom of this page.  </value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestAccessorialsLimitedAccessType {\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestAccessorialsLimitedAccessType);
        }

        /// <summary>
        /// Returns true if BOLRequestAccessorialsLimitedAccessType instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestAccessorialsLimitedAccessType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestAccessorialsLimitedAccessType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

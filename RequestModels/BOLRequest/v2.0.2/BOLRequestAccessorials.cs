/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestAccessorials
    /// </summary>
    [DataContract]
        public partial class BOLRequestAccessorials :  IEquatable<BOLRequestAccessorials>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestAccessorials" /> class.
        /// </summary>
        /// <param name="codes">An array to hold the list of services requested for the shipment  Valid Values: See the Accessorial_Codes schema at the bottom of this page. .</param>
        /// <param name="hazardousDetails">hazardousDetails.</param>
        /// <param name="cod">cod.</param>
        /// <param name="sortAndSegregateDetails">sortAndSegregateDetails.</param>
        /// <param name="fullValueCoverageDetails">fullValueCoverageDetails.</param>
        /// <param name="markDetails">markDetails.</param>
        /// <param name="limitedAccessType">limitedAccessType.</param>
        /// <param name="timeCriticalDetails">timeCriticalDetails.</param>
        /// <param name="appointmentDetails">appointmentDetails.</param>
        public BOLRequestAccessorials(List<string> codes = default(List<string>), BOLRequestAccessorialsHazardousDetails hazardousDetails = default(BOLRequestAccessorialsHazardousDetails), BOLRequestAccessorialsCod cod = default(BOLRequestAccessorialsCod), BOLRequestAccessorialsSortAndSegregateDetails sortAndSegregateDetails = default(BOLRequestAccessorialsSortAndSegregateDetails), BOLRequestAccessorialsFullValueCoverageDetails fullValueCoverageDetails = default(BOLRequestAccessorialsFullValueCoverageDetails), BOLRequestAccessorialsMarkDetails markDetails = default(BOLRequestAccessorialsMarkDetails), BOLRequestAccessorialsLimitedAccessType limitedAccessType = default(BOLRequestAccessorialsLimitedAccessType), BOLRequestAccessorialsTimeCriticalDetails timeCriticalDetails = default(BOLRequestAccessorialsTimeCriticalDetails), BOLRequestAccessorialsAppointmentDetails appointmentDetails = default(BOLRequestAccessorialsAppointmentDetails))
        {
            this.Codes = codes;
            this.HazardousDetails = hazardousDetails;
            this.Cod = cod;
            this.SortAndSegregateDetails = sortAndSegregateDetails;
            this.FullValueCoverageDetails = fullValueCoverageDetails;
            this.MarkDetails = markDetails;
            this.LimitedAccessType = limitedAccessType;
            this.TimeCriticalDetails = timeCriticalDetails;
            this.AppointmentDetails = appointmentDetails;
        }
        
        /// <summary>
        /// An array to hold the list of services requested for the shipment  Valid Values: See the Accessorial_Codes schema at the bottom of this page. 
        /// </summary>
        /// <value>An array to hold the list of services requested for the shipment  Valid Values: See the Accessorial_Codes schema at the bottom of this page. </value>
        [DataMember(Name="codes", EmitDefaultValue=false)]
        public List<string> Codes { get; set; }

        /// <summary>
        /// Gets or Sets HazardousDetails
        /// </summary>
        [DataMember(Name="hazardousDetails", EmitDefaultValue=false)]
        public BOLRequestAccessorialsHazardousDetails HazardousDetails { get; set; }

        /// <summary>
        /// Gets or Sets Cod
        /// </summary>
        [DataMember(Name="cod", EmitDefaultValue=false)]
        public BOLRequestAccessorialsCod Cod { get; set; }

        /// <summary>
        /// Gets or Sets SortAndSegregateDetails
        /// </summary>
        [DataMember(Name="sortAndSegregateDetails", EmitDefaultValue=false)]
        public BOLRequestAccessorialsSortAndSegregateDetails SortAndSegregateDetails { get; set; }

        /// <summary>
        /// Gets or Sets FullValueCoverageDetails
        /// </summary>
        [DataMember(Name="fullValueCoverageDetails", EmitDefaultValue=false)]
        public BOLRequestAccessorialsFullValueCoverageDetails FullValueCoverageDetails { get; set; }

        /// <summary>
        /// Gets or Sets MarkDetails
        /// </summary>
        [DataMember(Name="markDetails", EmitDefaultValue=false)]
        public BOLRequestAccessorialsMarkDetails MarkDetails { get; set; }

        /// <summary>
        /// Gets or Sets LimitedAccessType
        /// </summary>
        [DataMember(Name="limitedAccessType", EmitDefaultValue=false)]
        public BOLRequestAccessorialsLimitedAccessType LimitedAccessType { get; set; }

        /// <summary>
        /// Gets or Sets TimeCriticalDetails
        /// </summary>
        [DataMember(Name="timeCriticalDetails", EmitDefaultValue=false)]
        public BOLRequestAccessorialsTimeCriticalDetails TimeCriticalDetails { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentDetails
        /// </summary>
        [DataMember(Name="appointmentDetails", EmitDefaultValue=false)]
        public BOLRequestAccessorialsAppointmentDetails AppointmentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestAccessorials {\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("  HazardousDetails: ").Append(HazardousDetails).Append("\n");
            sb.Append("  Cod: ").Append(Cod).Append("\n");
            sb.Append("  SortAndSegregateDetails: ").Append(SortAndSegregateDetails).Append("\n");
            sb.Append("  FullValueCoverageDetails: ").Append(FullValueCoverageDetails).Append("\n");
            sb.Append("  MarkDetails: ").Append(MarkDetails).Append("\n");
            sb.Append("  LimitedAccessType: ").Append(LimitedAccessType).Append("\n");
            sb.Append("  TimeCriticalDetails: ").Append(TimeCriticalDetails).Append("\n");
            sb.Append("  AppointmentDetails: ").Append(AppointmentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestAccessorials);
        }

        /// <summary>
        /// Returns true if BOLRequestAccessorials instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestAccessorials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestAccessorials input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codes == input.Codes ||
                    this.Codes != null &&
                    input.Codes != null &&
                    this.Codes.SequenceEqual(input.Codes)
                ) && 
                (
                    this.HazardousDetails == input.HazardousDetails ||
                    (this.HazardousDetails != null &&
                    this.HazardousDetails.Equals(input.HazardousDetails))
                ) && 
                (
                    this.Cod == input.Cod ||
                    (this.Cod != null &&
                    this.Cod.Equals(input.Cod))
                ) && 
                (
                    this.SortAndSegregateDetails == input.SortAndSegregateDetails ||
                    (this.SortAndSegregateDetails != null &&
                    this.SortAndSegregateDetails.Equals(input.SortAndSegregateDetails))
                ) && 
                (
                    this.FullValueCoverageDetails == input.FullValueCoverageDetails ||
                    (this.FullValueCoverageDetails != null &&
                    this.FullValueCoverageDetails.Equals(input.FullValueCoverageDetails))
                ) && 
                (
                    this.MarkDetails == input.MarkDetails ||
                    (this.MarkDetails != null &&
                    this.MarkDetails.Equals(input.MarkDetails))
                ) && 
                (
                    this.LimitedAccessType == input.LimitedAccessType ||
                    (this.LimitedAccessType != null &&
                    this.LimitedAccessType.Equals(input.LimitedAccessType))
                ) && 
                (
                    this.TimeCriticalDetails == input.TimeCriticalDetails ||
                    (this.TimeCriticalDetails != null &&
                    this.TimeCriticalDetails.Equals(input.TimeCriticalDetails))
                ) && 
                (
                    this.AppointmentDetails == input.AppointmentDetails ||
                    (this.AppointmentDetails != null &&
                    this.AppointmentDetails.Equals(input.AppointmentDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codes != null)
                    hashCode = hashCode * 59 + this.Codes.GetHashCode();
                if (this.HazardousDetails != null)
                    hashCode = hashCode * 59 + this.HazardousDetails.GetHashCode();
                if (this.Cod != null)
                    hashCode = hashCode * 59 + this.Cod.GetHashCode();
                if (this.SortAndSegregateDetails != null)
                    hashCode = hashCode * 59 + this.SortAndSegregateDetails.GetHashCode();
                if (this.FullValueCoverageDetails != null)
                    hashCode = hashCode * 59 + this.FullValueCoverageDetails.GetHashCode();
                if (this.MarkDetails != null)
                    hashCode = hashCode * 59 + this.MarkDetails.GetHashCode();
                if (this.LimitedAccessType != null)
                    hashCode = hashCode * 59 + this.LimitedAccessType.GetHashCode();
                if (this.TimeCriticalDetails != null)
                    hashCode = hashCode * 59 + this.TimeCriticalDetails.GetHashCode();
                if (this.AppointmentDetails != null)
                    hashCode = hashCode * 59 + this.AppointmentDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

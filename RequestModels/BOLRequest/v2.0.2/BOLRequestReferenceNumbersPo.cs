/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestReferenceNumbersPo
    /// </summary>
    [DataContract]
        public partial class BOLRequestReferenceNumbersPo :  IEquatable<BOLRequestReferenceNumbersPo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestReferenceNumbersPo" /> class.
        /// </summary>
        /// <param name="number">The Purchase Order number..</param>
        /// <param name="pieces">Total pieces associated with the Purchase Order.</param>
        /// <param name="weight">Total weight associated with the Purchase Order.</param>
        /// <param name="weightUnit">The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                      .</param>
        /// <param name="palletized">Indicates whether or not the pieces associated with the purchase order are on a pallet/slip/skid or not..</param>
        /// <param name="additionalShipperInfo">Additional information from shipper per line item.</param>
        public BOLRequestReferenceNumbersPo(string number = default(string), int? pieces = default(int?), int? weight = default(int?), string weightUnit = default(string), bool? palletized = default(bool?), string additionalShipperInfo = default(string))
        {
            this.Number = number;
            this.Pieces = pieces;
            this.Weight = weight;
            this.WeightUnit = weightUnit;
            this.Palletized = palletized;
            this.AdditionalShipperInfo = additionalShipperInfo;
        }
        
        /// <summary>
        /// The Purchase Order number.
        /// </summary>
        /// <value>The Purchase Order number.</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Total pieces associated with the Purchase Order
        /// </summary>
        /// <value>Total pieces associated with the Purchase Order</value>
        [DataMember(Name="pieces", EmitDefaultValue=false)]
        public int? Pieces { get; set; }

        /// <summary>
        /// Total weight associated with the Purchase Order
        /// </summary>
        /// <value>Total weight associated with the Purchase Order</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                      
        /// </summary>
        /// <value>The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                      </value>
        [DataMember(Name="weightUnit", EmitDefaultValue=false)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Indicates whether or not the pieces associated with the purchase order are on a pallet/slip/skid or not.
        /// </summary>
        /// <value>Indicates whether or not the pieces associated with the purchase order are on a pallet/slip/skid or not.</value>
        [DataMember(Name="palletized", EmitDefaultValue=false)]
        public bool? Palletized { get; set; }

        /// <summary>
        /// Additional information from shipper per line item
        /// </summary>
        /// <value>Additional information from shipper per line item</value>
        [DataMember(Name="additionalShipperInfo", EmitDefaultValue=false)]
        public string AdditionalShipperInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestReferenceNumbersPo {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Pieces: ").Append(Pieces).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  Palletized: ").Append(Palletized).Append("\n");
            sb.Append("  AdditionalShipperInfo: ").Append(AdditionalShipperInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestReferenceNumbersPo);
        }

        /// <summary>
        /// Returns true if BOLRequestReferenceNumbersPo instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestReferenceNumbersPo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestReferenceNumbersPo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Pieces == input.Pieces ||
                    (this.Pieces != null &&
                    this.Pieces.Equals(input.Pieces))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.WeightUnit == input.WeightUnit ||
                    (this.WeightUnit != null &&
                    this.WeightUnit.Equals(input.WeightUnit))
                ) && 
                (
                    this.Palletized == input.Palletized ||
                    (this.Palletized != null &&
                    this.Palletized.Equals(input.Palletized))
                ) && 
                (
                    this.AdditionalShipperInfo == input.AdditionalShipperInfo ||
                    (this.AdditionalShipperInfo != null &&
                    this.AdditionalShipperInfo.Equals(input.AdditionalShipperInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Pieces != null)
                    hashCode = hashCode * 59 + this.Pieces.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightUnit != null)
                    hashCode = hashCode * 59 + this.WeightUnit.GetHashCode();
                if (this.Palletized != null)
                    hashCode = hashCode * 59 + this.Palletized.GetHashCode();
                if (this.AdditionalShipperInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalShipperInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestCommoditiesHazardousDetails
    /// </summary>
    [DataContract]
        public partial class BOLRequestCommoditiesHazardousDetails :  IEquatable<BOLRequestCommoditiesHazardousDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestCommoditiesHazardousDetails" /> class.
        /// </summary>
        /// <param name="weight">Total weight of hazardous material coveraged by one description..</param>
        /// <param name="weightUnit">The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                                                      .</param>
        /// <param name="_class">Class that the hazardous material is catogorized by..</param>
        /// <param name="unnaNumber">Proper Identification Number (UN or NA) corresponding to the Proper Shipping Name.</param>
        /// <param name="propername">Proper shipping name for the hazardous material.  From DOT regulations 172.101 .</param>
        /// <param name="technicalName">Technical name for the hazardous material. Not all hazardous items will have a technical name. From DOT regulations 172.101 .</param>
        /// <param name="packingGroup">Hazmat Packing Group number. Not all hazmat items have a packing group.</param>
        /// <param name="contractNumber">The contract number with the hazardous materials contact.</param>
        public BOLRequestCommoditiesHazardousDetails(int? weight = default(int?), string weightUnit = default(string), string _class = default(string), string unnaNumber = default(string), string propername = default(string), string technicalName = default(string), string packingGroup = default(string), string contractNumber = default(string))
        {
            this.Weight = weight;
            this.WeightUnit = weightUnit;
            this._Class = _class;
            this.UnnaNumber = unnaNumber;
            this.Propername = propername;
            this.TechnicalName = technicalName;
            this.PackingGroup = packingGroup;
            this.ContractNumber = contractNumber;
        }
        
        /// <summary>
        /// Total weight of hazardous material coveraged by one description.
        /// </summary>
        /// <value>Total weight of hazardous material coveraged by one description.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                                                      
        /// </summary>
        /// <value>The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms                                                      </value>
        [DataMember(Name="weightUnit", EmitDefaultValue=false)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Class that the hazardous material is catogorized by.
        /// </summary>
        /// <value>Class that the hazardous material is catogorized by.</value>
        [DataMember(Name="class", EmitDefaultValue=false)]
        public string _Class { get; set; }

        /// <summary>
        /// Proper Identification Number (UN or NA) corresponding to the Proper Shipping Name
        /// </summary>
        /// <value>Proper Identification Number (UN or NA) corresponding to the Proper Shipping Name</value>
        [DataMember(Name="unnaNumber", EmitDefaultValue=false)]
        public string UnnaNumber { get; set; }

        /// <summary>
        /// Proper shipping name for the hazardous material.  From DOT regulations 172.101 
        /// </summary>
        /// <value>Proper shipping name for the hazardous material.  From DOT regulations 172.101 </value>
        [DataMember(Name="propername", EmitDefaultValue=false)]
        public string Propername { get; set; }

        /// <summary>
        /// Technical name for the hazardous material. Not all hazardous items will have a technical name. From DOT regulations 172.101 
        /// </summary>
        /// <value>Technical name for the hazardous material. Not all hazardous items will have a technical name. From DOT regulations 172.101 </value>
        [DataMember(Name="technicalName", EmitDefaultValue=false)]
        public string TechnicalName { get; set; }

        /// <summary>
        /// Hazmat Packing Group number. Not all hazmat items have a packing group
        /// </summary>
        /// <value>Hazmat Packing Group number. Not all hazmat items have a packing group</value>
        [DataMember(Name="packingGroup", EmitDefaultValue=false)]
        public string PackingGroup { get; set; }

        /// <summary>
        /// The contract number with the hazardous materials contact
        /// </summary>
        /// <value>The contract number with the hazardous materials contact</value>
        [DataMember(Name="contractNumber", EmitDefaultValue=false)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestCommoditiesHazardousDetails {\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("  UnnaNumber: ").Append(UnnaNumber).Append("\n");
            sb.Append("  Propername: ").Append(Propername).Append("\n");
            sb.Append("  TechnicalName: ").Append(TechnicalName).Append("\n");
            sb.Append("  PackingGroup: ").Append(PackingGroup).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestCommoditiesHazardousDetails);
        }

        /// <summary>
        /// Returns true if BOLRequestCommoditiesHazardousDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestCommoditiesHazardousDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestCommoditiesHazardousDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.WeightUnit == input.WeightUnit ||
                    (this.WeightUnit != null &&
                    this.WeightUnit.Equals(input.WeightUnit))
                ) && 
                (
                    this._Class == input._Class ||
                    (this._Class != null &&
                    this._Class.Equals(input._Class))
                ) && 
                (
                    this.UnnaNumber == input.UnnaNumber ||
                    (this.UnnaNumber != null &&
                    this.UnnaNumber.Equals(input.UnnaNumber))
                ) && 
                (
                    this.Propername == input.Propername ||
                    (this.Propername != null &&
                    this.Propername.Equals(input.Propername))
                ) && 
                (
                    this.TechnicalName == input.TechnicalName ||
                    (this.TechnicalName != null &&
                    this.TechnicalName.Equals(input.TechnicalName))
                ) && 
                (
                    this.PackingGroup == input.PackingGroup ||
                    (this.PackingGroup != null &&
                    this.PackingGroup.Equals(input.PackingGroup))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightUnit != null)
                    hashCode = hashCode * 59 + this.WeightUnit.GetHashCode();
                if (this._Class != null)
                    hashCode = hashCode * 59 + this._Class.GetHashCode();
                if (this.UnnaNumber != null)
                    hashCode = hashCode * 59 + this.UnnaNumber.GetHashCode();
                if (this.Propername != null)
                    hashCode = hashCode * 59 + this.Propername.GetHashCode();
                if (this.TechnicalName != null)
                    hashCode = hashCode * 59 + this.TechnicalName.GetHashCode();
                if (this.PackingGroup != null)
                    hashCode = hashCode * 59 + this.PackingGroup.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestImages
    /// </summary>
    [DataContract]
        public partial class BOLRequestImages :  IEquatable<BOLRequestImages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestImages" /> class.
        /// </summary>
        /// <param name="includeBol">Indicates whether or not you want an image of the populated BOL returned in the response.   Default is false. .</param>
        /// <param name="includeShippingLabels">Indicates whether or not you want image(s) of the shipping labels returned in the response.   Default is false. .</param>
        /// <param name="shippingLabels">shippingLabels.</param>
        /// <param name="email">email.</param>
        public BOLRequestImages(bool? includeBol = default(bool?), bool? includeShippingLabels = default(bool?), BOLRequestImagesShippingLabels shippingLabels = default(BOLRequestImagesShippingLabels), BOLRequestImagesEmail email = default(BOLRequestImagesEmail))
        {
            this.IncludeBol = includeBol;
            this.IncludeShippingLabels = includeShippingLabels;
            this.ShippingLabels = shippingLabels;
            this.Email = email;
        }
        
        /// <summary>
        /// Indicates whether or not you want an image of the populated BOL returned in the response.   Default is false. 
        /// </summary>
        /// <value>Indicates whether or not you want an image of the populated BOL returned in the response.   Default is false. </value>
        [DataMember(Name="includeBol", EmitDefaultValue=false)]
        public bool? IncludeBol { get; set; }

        /// <summary>
        /// Indicates whether or not you want image(s) of the shipping labels returned in the response.   Default is false. 
        /// </summary>
        /// <value>Indicates whether or not you want image(s) of the shipping labels returned in the response.   Default is false. </value>
        [DataMember(Name="includeShippingLabels", EmitDefaultValue=false)]
        public bool? IncludeShippingLabels { get; set; }

        /// <summary>
        /// Gets or Sets ShippingLabels
        /// </summary>
        [DataMember(Name="shippingLabels", EmitDefaultValue=false)]
        public BOLRequestImagesShippingLabels ShippingLabels { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public BOLRequestImagesEmail Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestImages {\n");
            sb.Append("  IncludeBol: ").Append(IncludeBol).Append("\n");
            sb.Append("  IncludeShippingLabels: ").Append(IncludeShippingLabels).Append("\n");
            sb.Append("  ShippingLabels: ").Append(ShippingLabels).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestImages);
        }

        /// <summary>
        /// Returns true if BOLRequestImages instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestImages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncludeBol == input.IncludeBol ||
                    (this.IncludeBol != null &&
                    this.IncludeBol.Equals(input.IncludeBol))
                ) && 
                (
                    this.IncludeShippingLabels == input.IncludeShippingLabels ||
                    (this.IncludeShippingLabels != null &&
                    this.IncludeShippingLabels.Equals(input.IncludeShippingLabels))
                ) && 
                (
                    this.ShippingLabels == input.ShippingLabels ||
                    (this.ShippingLabels != null &&
                    this.ShippingLabels.Equals(input.ShippingLabels))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncludeBol != null)
                    hashCode = hashCode * 59 + this.IncludeBol.GetHashCode();
                if (this.IncludeShippingLabels != null)
                    hashCode = hashCode * 59 + this.IncludeShippingLabels.GetHashCode();
                if (this.ShippingLabels != null)
                    hashCode = hashCode * 59 + this.ShippingLabels.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

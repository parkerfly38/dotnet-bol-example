/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestBillTo
    /// </summary>
    [DataContract]
        public partial class BOLRequestBillTo :  IEquatable<BOLRequestBillTo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestBillTo" /> class.
        /// </summary>
        /// <param name="account">Company&#x27;s account number/id for the billTo..</param>
        /// <param name="locationId">Company&#x27;s location id for the billTo..</param>
        /// <param name="name">Company name associated with the billTo location. (required).</param>
        /// <param name="address1">Primary Address line for the billTo location (required).</param>
        /// <param name="address2">Secondary Address line for the billTo location.</param>
        /// <param name="city">City Name for the billTo location (required).</param>
        /// <param name="stateProvince">Two letter state/province code for the billTo location.  Valid Values: See the State_Province_Codes schema at the bottom of this page.  (required).</param>
        /// <param name="postalCode">The 5-digit (or 6-characters for Canada) zip code ofor the billTo location.  Valid formats:   * 12345 (5 digits - USA/MEX)   * A1A1A1 (6 characters - CAN)   * A1A1A (5 characters - CAN)  (required).</param>
        /// <param name="country">Three letter country code for the billTo location.  Valid Values: See the Country_Codes schema at the bottom of this page.  (required).</param>
        /// <param name="contact">contact (required).</param>
        public BOLRequestBillTo(string account = default(string), string locationId = default(string), string name = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string stateProvince = default(string), string postalCode = default(string), string country = default(string), BOLRequestBillToContact contact = default(BOLRequestBillToContact))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BOLRequestBillTo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "address1" is required (not null)
            if (address1 == null)
            {
                throw new InvalidDataException("address1 is a required property for BOLRequestBillTo and cannot be null");
            }
            else
            {
                this.Address1 = address1;
            }
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new InvalidDataException("city is a required property for BOLRequestBillTo and cannot be null");
            }
            else
            {
                this.City = city;
            }
            // to ensure "stateProvince" is required (not null)
            if (stateProvince == null)
            {
                throw new InvalidDataException("stateProvince is a required property for BOLRequestBillTo and cannot be null");
            }
            else
            {
                this.StateProvince = stateProvince;
            }
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new InvalidDataException("postalCode is a required property for BOLRequestBillTo and cannot be null");
            }
            else
            {
                this.PostalCode = postalCode;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for BOLRequestBillTo and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            // to ensure "contact" is required (not null)
            if (contact == null)
            {
                throw new InvalidDataException("contact is a required property for BOLRequestBillTo and cannot be null");
            }
            else
            {
                this.Contact = contact;
            }
            this.Account = account;
            this.LocationId = locationId;
            this.Address2 = address2;
        }
        
        /// <summary>
        /// Company&#x27;s account number/id for the billTo.
        /// </summary>
        /// <value>Company&#x27;s account number/id for the billTo.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Company&#x27;s location id for the billTo.
        /// </summary>
        /// <value>Company&#x27;s location id for the billTo.</value>
        [DataMember(Name="locationId", EmitDefaultValue=false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Company name associated with the billTo location.
        /// </summary>
        /// <value>Company name associated with the billTo location.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Primary Address line for the billTo location
        /// </summary>
        /// <value>Primary Address line for the billTo location</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Secondary Address line for the billTo location
        /// </summary>
        /// <value>Secondary Address line for the billTo location</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// City Name for the billTo location
        /// </summary>
        /// <value>City Name for the billTo location</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Two letter state/province code for the billTo location.  Valid Values: See the State_Province_Codes schema at the bottom of this page. 
        /// </summary>
        /// <value>Two letter state/province code for the billTo location.  Valid Values: See the State_Province_Codes schema at the bottom of this page. </value>
        [DataMember(Name="stateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }

        /// <summary>
        /// The 5-digit (or 6-characters for Canada) zip code ofor the billTo location.  Valid formats:   * 12345 (5 digits - USA/MEX)   * A1A1A1 (6 characters - CAN)   * A1A1A (5 characters - CAN) 
        /// </summary>
        /// <value>The 5-digit (or 6-characters for Canada) zip code ofor the billTo location.  Valid formats:   * 12345 (5 digits - USA/MEX)   * A1A1A1 (6 characters - CAN)   * A1A1A (5 characters - CAN) </value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Three letter country code for the billTo location.  Valid Values: See the Country_Codes schema at the bottom of this page. 
        /// </summary>
        /// <value>Three letter country code for the billTo location.  Valid Values: See the Country_Codes schema at the bottom of this page. </value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public BOLRequestBillToContact Contact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestBillTo {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestBillTo);
        }

        /// <summary>
        /// Returns true if BOLRequestBillTo instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestBillTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestBillTo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.StateProvince != null)
                    hashCode = hashCode * 59 + this.StateProvince.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

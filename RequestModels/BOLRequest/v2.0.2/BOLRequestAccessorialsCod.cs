/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// Required when accessorial code COD is present in the accessorial.codes list.  
    /// </summary>
    [DataContract]
        public partial class BOLRequestAccessorialsCod :  IEquatable<BOLRequestAccessorialsCod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestAccessorialsCod" /> class.
        /// </summary>
        /// <param name="amount">Amount to be received for the COD.  Valid Formats: * ##.## (2 decimal places only) .</param>
        /// <param name="currency">Optional attribute to indicate currency of COD. Defaults to USD.  Valid values: See the Currencies schema at the bottom of this page. .</param>
        /// <param name="terms">Payment terms associated with the COD.  Valid Values: * Prepaid * Collect .</param>
        /// <param name="customerCheckAcceptable">Indicates whether or not a customer check or cash is acceptable..</param>
        /// <param name="remitTo">remitTo.</param>
        public BOLRequestAccessorialsCod(string amount = default(string), string currency = default(string), string terms = default(string), bool? customerCheckAcceptable = default(bool?), BOLRequestAccessorialsCodRemitTo remitTo = default(BOLRequestAccessorialsCodRemitTo))
        {
            this.Amount = amount;
            this.Currency = currency;
            this.Terms = terms;
            this.CustomerCheckAcceptable = customerCheckAcceptable;
            this.RemitTo = remitTo;
        }
        
        /// <summary>
        /// Amount to be received for the COD.  Valid Formats: * ##.## (2 decimal places only) 
        /// </summary>
        /// <value>Amount to be received for the COD.  Valid Formats: * ##.## (2 decimal places only) </value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Optional attribute to indicate currency of COD. Defaults to USD.  Valid values: See the Currencies schema at the bottom of this page. 
        /// </summary>
        /// <value>Optional attribute to indicate currency of COD. Defaults to USD.  Valid values: See the Currencies schema at the bottom of this page. </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Payment terms associated with the COD.  Valid Values: * Prepaid * Collect 
        /// </summary>
        /// <value>Payment terms associated with the COD.  Valid Values: * Prepaid * Collect </value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// Indicates whether or not a customer check or cash is acceptable.
        /// </summary>
        /// <value>Indicates whether or not a customer check or cash is acceptable.</value>
        [DataMember(Name="customerCheckAcceptable", EmitDefaultValue=false)]
        public bool? CustomerCheckAcceptable { get; set; }

        /// <summary>
        /// Gets or Sets RemitTo
        /// </summary>
        [DataMember(Name="remitTo", EmitDefaultValue=false)]
        public BOLRequestAccessorialsCodRemitTo RemitTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestAccessorialsCod {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  CustomerCheckAcceptable: ").Append(CustomerCheckAcceptable).Append("\n");
            sb.Append("  RemitTo: ").Append(RemitTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestAccessorialsCod);
        }

        /// <summary>
        /// Returns true if BOLRequestAccessorialsCod instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestAccessorialsCod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestAccessorialsCod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.CustomerCheckAcceptable == input.CustomerCheckAcceptable ||
                    (this.CustomerCheckAcceptable != null &&
                    this.CustomerCheckAcceptable.Equals(input.CustomerCheckAcceptable))
                ) && 
                (
                    this.RemitTo == input.RemitTo ||
                    (this.RemitTo != null &&
                    this.RemitTo.Equals(input.RemitTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.CustomerCheckAcceptable != null)
                    hashCode = hashCode * 59 + this.CustomerCheckAcceptable.GetHashCode();
                if (this.RemitTo != null)
                    hashCode = hashCode * 59 + this.RemitTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

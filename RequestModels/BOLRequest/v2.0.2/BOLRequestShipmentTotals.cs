/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestShipmentTotals
    /// </summary>
    [DataContract]
        public partial class BOLRequestShipmentTotals :  IEquatable<BOLRequestShipmentTotals>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestShipmentTotals" /> class.
        /// </summary>
        /// <param name="grossWeight">Total weight of the entire shipment, including handling units (tare weight)..</param>
        /// <param name="netWeight">Total weight of the entire shipment, not including handling units (tare weight)..</param>
        /// <param name="weightUnit">The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms .</param>
        /// <param name="handlingUnits">Handling unit count for the entire shipment.</param>
        /// <param name="linearLength">Linear length for the entire shipment.</param>
        /// <param name="dimensionsUnit">The unit of measurement for dimensions.  Defaults to Inches (Imperial) if not passed.  Valid Values: Inches or Centimeters .</param>
        /// <param name="cube">Cubic volume of the entire shipment (total length X total width X total height)..</param>
        /// <param name="cubeDimensionsUnit">The unit of measurement for cubic dimensions.  Defaults to Feet (Imperial) if not passed.  Valid Values: Feet or Meters .</param>
        /// <param name="declaredValue">Total monetary value of the shipment in USD (sometimes needed for cross-border moves)..</param>
        /// <param name="currency">Optional attribute to indicate currency of declaredValue. Defaults to USD.  Valid values: See the Currencies schema at the bottom of this page. .</param>
        public BOLRequestShipmentTotals(int? grossWeight = default(int?), int? netWeight = default(int?), string weightUnit = default(string), int? handlingUnits = default(int?), int? linearLength = default(int?), string dimensionsUnit = default(string), int? cube = default(int?), string cubeDimensionsUnit = default(string), int? declaredValue = default(int?), string currency = default(string))
        {
            this.GrossWeight = grossWeight;
            this.NetWeight = netWeight;
            this.WeightUnit = weightUnit;
            this.HandlingUnits = handlingUnits;
            this.LinearLength = linearLength;
            this.DimensionsUnit = dimensionsUnit;
            this.Cube = cube;
            this.CubeDimensionsUnit = cubeDimensionsUnit;
            this.DeclaredValue = declaredValue;
            this.Currency = currency;
        }
        
        /// <summary>
        /// Total weight of the entire shipment, including handling units (tare weight).
        /// </summary>
        /// <value>Total weight of the entire shipment, including handling units (tare weight).</value>
        [DataMember(Name="grossWeight", EmitDefaultValue=false)]
        public int? GrossWeight { get; set; }

        /// <summary>
        /// Total weight of the entire shipment, not including handling units (tare weight).
        /// </summary>
        /// <value>Total weight of the entire shipment, not including handling units (tare weight).</value>
        [DataMember(Name="netWeight", EmitDefaultValue=false)]
        public int? NetWeight { get; set; }

        /// <summary>
        /// The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms 
        /// </summary>
        /// <value>The unit of measurement for weight.  Defaults to Pounds (Imperial) if not passed.  Valid Values: Pounds or Kilograms </value>
        [DataMember(Name="weightUnit", EmitDefaultValue=false)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Handling unit count for the entire shipment
        /// </summary>
        /// <value>Handling unit count for the entire shipment</value>
        [DataMember(Name="handlingUnits", EmitDefaultValue=false)]
        public int? HandlingUnits { get; set; }

        /// <summary>
        /// Linear length for the entire shipment
        /// </summary>
        /// <value>Linear length for the entire shipment</value>
        [DataMember(Name="linearLength", EmitDefaultValue=false)]
        public int? LinearLength { get; set; }

        /// <summary>
        /// The unit of measurement for dimensions.  Defaults to Inches (Imperial) if not passed.  Valid Values: Inches or Centimeters 
        /// </summary>
        /// <value>The unit of measurement for dimensions.  Defaults to Inches (Imperial) if not passed.  Valid Values: Inches or Centimeters </value>
        [DataMember(Name="dimensionsUnit", EmitDefaultValue=false)]
        public string DimensionsUnit { get; set; }

        /// <summary>
        /// Cubic volume of the entire shipment (total length X total width X total height).
        /// </summary>
        /// <value>Cubic volume of the entire shipment (total length X total width X total height).</value>
        [DataMember(Name="cube", EmitDefaultValue=false)]
        public int? Cube { get; set; }

        /// <summary>
        /// The unit of measurement for cubic dimensions.  Defaults to Feet (Imperial) if not passed.  Valid Values: Feet or Meters 
        /// </summary>
        /// <value>The unit of measurement for cubic dimensions.  Defaults to Feet (Imperial) if not passed.  Valid Values: Feet or Meters </value>
        [DataMember(Name="cubeDimensionsUnit", EmitDefaultValue=false)]
        public string CubeDimensionsUnit { get; set; }

        /// <summary>
        /// Total monetary value of the shipment in USD (sometimes needed for cross-border moves).
        /// </summary>
        /// <value>Total monetary value of the shipment in USD (sometimes needed for cross-border moves).</value>
        [DataMember(Name="declaredValue", EmitDefaultValue=false)]
        public int? DeclaredValue { get; set; }

        /// <summary>
        /// Optional attribute to indicate currency of declaredValue. Defaults to USD.  Valid values: See the Currencies schema at the bottom of this page. 
        /// </summary>
        /// <value>Optional attribute to indicate currency of declaredValue. Defaults to USD.  Valid values: See the Currencies schema at the bottom of this page. </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestShipmentTotals {\n");
            sb.Append("  GrossWeight: ").Append(GrossWeight).Append("\n");
            sb.Append("  NetWeight: ").Append(NetWeight).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  HandlingUnits: ").Append(HandlingUnits).Append("\n");
            sb.Append("  LinearLength: ").Append(LinearLength).Append("\n");
            sb.Append("  DimensionsUnit: ").Append(DimensionsUnit).Append("\n");
            sb.Append("  Cube: ").Append(Cube).Append("\n");
            sb.Append("  CubeDimensionsUnit: ").Append(CubeDimensionsUnit).Append("\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestShipmentTotals);
        }

        /// <summary>
        /// Returns true if BOLRequestShipmentTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestShipmentTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestShipmentTotals input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GrossWeight == input.GrossWeight ||
                    (this.GrossWeight != null &&
                    this.GrossWeight.Equals(input.GrossWeight))
                ) && 
                (
                    this.NetWeight == input.NetWeight ||
                    (this.NetWeight != null &&
                    this.NetWeight.Equals(input.NetWeight))
                ) && 
                (
                    this.WeightUnit == input.WeightUnit ||
                    (this.WeightUnit != null &&
                    this.WeightUnit.Equals(input.WeightUnit))
                ) && 
                (
                    this.HandlingUnits == input.HandlingUnits ||
                    (this.HandlingUnits != null &&
                    this.HandlingUnits.Equals(input.HandlingUnits))
                ) && 
                (
                    this.LinearLength == input.LinearLength ||
                    (this.LinearLength != null &&
                    this.LinearLength.Equals(input.LinearLength))
                ) && 
                (
                    this.DimensionsUnit == input.DimensionsUnit ||
                    (this.DimensionsUnit != null &&
                    this.DimensionsUnit.Equals(input.DimensionsUnit))
                ) && 
                (
                    this.Cube == input.Cube ||
                    (this.Cube != null &&
                    this.Cube.Equals(input.Cube))
                ) && 
                (
                    this.CubeDimensionsUnit == input.CubeDimensionsUnit ||
                    (this.CubeDimensionsUnit != null &&
                    this.CubeDimensionsUnit.Equals(input.CubeDimensionsUnit))
                ) && 
                (
                    this.DeclaredValue == input.DeclaredValue ||
                    (this.DeclaredValue != null &&
                    this.DeclaredValue.Equals(input.DeclaredValue))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GrossWeight != null)
                    hashCode = hashCode * 59 + this.GrossWeight.GetHashCode();
                if (this.NetWeight != null)
                    hashCode = hashCode * 59 + this.NetWeight.GetHashCode();
                if (this.WeightUnit != null)
                    hashCode = hashCode * 59 + this.WeightUnit.GetHashCode();
                if (this.HandlingUnits != null)
                    hashCode = hashCode * 59 + this.HandlingUnits.GetHashCode();
                if (this.LinearLength != null)
                    hashCode = hashCode * 59 + this.LinearLength.GetHashCode();
                if (this.DimensionsUnit != null)
                    hashCode = hashCode * 59 + this.DimensionsUnit.GetHashCode();
                if (this.Cube != null)
                    hashCode = hashCode * 59 + this.Cube.GetHashCode();
                if (this.CubeDimensionsUnit != null)
                    hashCode = hashCode * 59 + this.CubeDimensionsUnit.GetHashCode();
                if (this.DeclaredValue != null)
                    hashCode = hashCode * 59 + this.DeclaredValue.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

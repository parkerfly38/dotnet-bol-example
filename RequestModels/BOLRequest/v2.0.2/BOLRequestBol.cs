/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestBol
    /// </summary>
    [DataContract]
        public partial class BOLRequestBol :  IEquatable<BOLRequestBol>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestBol" /> class.
        /// </summary>
        /// <param name="requestedPickupDate">The intended Ship Date. NOTE this does not serve as a Pickup Request  Valid Formats: * YYYY-MM-DDTHH:mm:ss.sss (ISO 8601)  (required).</param>
        /// <param name="function">The intent for the submitted request.  Valid Values: * Create - Used for initial creation * Update - Used for an update * Delete - Used for a delete  (required).</param>
        /// <param name="isTest">Indicates whether or not the submitted request is intended to be a test or not. (required).</param>
        /// <param name="requestorRole">Identifies the party making the request.  Valid Values: See Requestor_Roles schema at the bottom of this page.  (required).</param>
        /// <param name="specialInstructions">Special delivery instructions that need to be followed for the shipment&#x27;s delivery.            .</param>
        public BOLRequestBol(string requestedPickupDate = default(string), string function = default(string), bool? isTest = default(bool?), string requestorRole = default(string), string specialInstructions = default(string))
        {
            // to ensure "requestedPickupDate" is required (not null)
            if (requestedPickupDate == null)
            {
                throw new InvalidDataException("requestedPickupDate is a required property for BOLRequestBol and cannot be null");
            }
            else
            {
                this.RequestedPickupDate = requestedPickupDate;
            }
            // to ensure "function" is required (not null)
            if (function == null)
            {
                throw new InvalidDataException("function is a required property for BOLRequestBol and cannot be null");
            }
            else
            {
                this.Function = function;
            }
            // to ensure "isTest" is required (not null)
            if (isTest == null)
            {
                throw new InvalidDataException("isTest is a required property for BOLRequestBol and cannot be null");
            }
            else
            {
                this.IsTest = isTest;
            }
            // to ensure "requestorRole" is required (not null)
            if (requestorRole == null)
            {
                throw new InvalidDataException("requestorRole is a required property for BOLRequestBol and cannot be null");
            }
            else
            {
                this.RequestorRole = requestorRole;
            }
            this.SpecialInstructions = specialInstructions;
        }
        
        /// <summary>
        /// The intended Ship Date. NOTE this does not serve as a Pickup Request  Valid Formats: * YYYY-MM-DDTHH:mm:ss.sss (ISO 8601) 
        /// </summary>
        /// <value>The intended Ship Date. NOTE this does not serve as a Pickup Request  Valid Formats: * YYYY-MM-DDTHH:mm:ss.sss (ISO 8601) </value>
        [DataMember(Name="requestedPickupDate", EmitDefaultValue=false)]
        public string RequestedPickupDate { get; set; }

        /// <summary>
        /// The intent for the submitted request.  Valid Values: * Create - Used for initial creation * Update - Used for an update * Delete - Used for a delete 
        /// </summary>
        /// <value>The intent for the submitted request.  Valid Values: * Create - Used for initial creation * Update - Used for an update * Delete - Used for a delete </value>
        [DataMember(Name="function", EmitDefaultValue=false)]
        public string Function { get; set; }

        /// <summary>
        /// Indicates whether or not the submitted request is intended to be a test or not.
        /// </summary>
        /// <value>Indicates whether or not the submitted request is intended to be a test or not.</value>
        [DataMember(Name="isTest", EmitDefaultValue=false)]
        public bool? IsTest { get; set; }

        /// <summary>
        /// Identifies the party making the request.  Valid Values: See Requestor_Roles schema at the bottom of this page. 
        /// </summary>
        /// <value>Identifies the party making the request.  Valid Values: See Requestor_Roles schema at the bottom of this page. </value>
        [DataMember(Name="requestorRole", EmitDefaultValue=false)]
        public string RequestorRole { get; set; }

        /// <summary>
        /// Special delivery instructions that need to be followed for the shipment&#x27;s delivery.            
        /// </summary>
        /// <value>Special delivery instructions that need to be followed for the shipment&#x27;s delivery.            </value>
        [DataMember(Name="specialInstructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestBol {\n");
            sb.Append("  RequestedPickupDate: ").Append(RequestedPickupDate).Append("\n");
            sb.Append("  Function: ").Append(Function).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  RequestorRole: ").Append(RequestorRole).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestBol);
        }

        /// <summary>
        /// Returns true if BOLRequestBol instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestBol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestBol input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestedPickupDate == input.RequestedPickupDate ||
                    (this.RequestedPickupDate != null &&
                    this.RequestedPickupDate.Equals(input.RequestedPickupDate))
                ) && 
                (
                    this.Function == input.Function ||
                    (this.Function != null &&
                    this.Function.Equals(input.Function))
                ) && 
                (
                    this.IsTest == input.IsTest ||
                    (this.IsTest != null &&
                    this.IsTest.Equals(input.IsTest))
                ) && 
                (
                    this.RequestorRole == input.RequestorRole ||
                    (this.RequestorRole != null &&
                    this.RequestorRole.Equals(input.RequestorRole))
                ) && 
                (
                    this.SpecialInstructions == input.SpecialInstructions ||
                    (this.SpecialInstructions != null &&
                    this.SpecialInstructions.Equals(input.SpecialInstructions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestedPickupDate != null)
                    hashCode = hashCode * 59 + this.RequestedPickupDate.GetHashCode();
                if (this.Function != null)
                    hashCode = hashCode * 59 + this.Function.GetHashCode();
                if (this.IsTest != null)
                    hashCode = hashCode * 59 + this.IsTest.GetHashCode();
                if (this.RequestorRole != null)
                    hashCode = hashCode * 59 + this.RequestorRole.GetHashCode();
                if (this.SpecialInstructions != null)
                    hashCode = hashCode * 59 + this.SpecialInstructions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

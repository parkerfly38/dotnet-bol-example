/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// BOLRequestCommodities
    /// </summary>
    [DataContract]
        public partial class BOLRequestCommodities :  IEquatable<BOLRequestCommodities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestCommodities" /> class.
        /// </summary>
        /// <param name="lineItemLayout"> Valid values: Nested or Stacked  Nested: Indicates if the Handling Unit/Line Item relationship is known. If this value is used, each Line Item associated to a Handling Unit is conditionally required to be passed within that Handling Unit&#x27;s object.  Stacked: Indicates if the Handling Unit/Line Item relationship is not known.  If this value is used, Line Items may passed within any Handling Unit object.  (required).</param>
        /// <param name="handlingUnits">handlingUnits (required).</param>
        public BOLRequestCommodities(
            string lineItemLayout = default(string), 
            List<BOLRequestCommoditiesHandlingUnits> handlingUnits = default(List<BOLRequestCommoditiesHandlingUnits>)
        )
        {
            // to ensure "lineItemLayout" is required (not null)
            if (lineItemLayout == null)
            {
                throw new InvalidDataException("lineItemLayout is a required property for BOLRequestCommodities and cannot be null");
            }
            else
            {
                this.LineItemLayout = lineItemLayout;
            }
            // to ensure "handlingUnits" is required (not null)
            if (handlingUnits == null)
            {
                throw new InvalidDataException("handlingUnits is a required property for BOLRequestCommodities and cannot be null");
            }
            else
            {
                this.HandlingUnits = handlingUnits;
            }
        }
        
        /// <summary>
        ///  Valid values: Nested or Stacked  Nested: Indicates if the Handling Unit/Line Item relationship is known. If this value is used, each Line Item associated to a Handling Unit is conditionally required to be passed within that Handling Unit&#x27;s object.  Stacked: Indicates if the Handling Unit/Line Item relationship is not known.  If this value is used, Line Items may passed within any Handling Unit object. 
        /// </summary>
        /// <value> Valid values: Nested or Stacked  Nested: Indicates if the Handling Unit/Line Item relationship is known. If this value is used, each Line Item associated to a Handling Unit is conditionally required to be passed within that Handling Unit&#x27;s object.  Stacked: Indicates if the Handling Unit/Line Item relationship is not known.  If this value is used, Line Items may passed within any Handling Unit object. </value>
        [DataMember(Name="lineItemLayout", EmitDefaultValue=false)]
        public string LineItemLayout { get; set; }

        /// <summary>
        /// Gets or Sets HandlingUnits
        /// </summary>
        [DataMember(Name="handlingUnits", EmitDefaultValue=false)]
        public List<BOLRequestCommoditiesHandlingUnits> HandlingUnits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestCommodities {\n");
            sb.Append("  LineItemLayout: ").Append(LineItemLayout).Append("\n");
            sb.Append("  HandlingUnits: ").Append(HandlingUnits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestCommodities);
        }

        /// <summary>
        /// Returns true if BOLRequestCommodities instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestCommodities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestCommodities input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineItemLayout == input.LineItemLayout ||
                    (this.LineItemLayout != null &&
                    this.LineItemLayout.Equals(input.LineItemLayout))
                ) && 
                (
                    this.HandlingUnits == input.HandlingUnits ||
                    this.HandlingUnits != null &&
                    input.HandlingUnits != null &&
                    this.HandlingUnits.SequenceEqual(input.HandlingUnits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineItemLayout != null)
                    hashCode = hashCode * 59 + this.LineItemLayout.GetHashCode();
                if (this.HandlingUnits != null)
                    hashCode = hashCode * 59 + this.HandlingUnits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// Required when accessorial code MARK is present in the accessorial.codes list. 
    /// </summary>
    [DataContract]
        public partial class BOLRequestAccessorialsMarkDetails :  IEquatable<BOLRequestAccessorialsMarkDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequestAccessorialsMarkDetails" /> class.
        /// </summary>
        /// <param name="pieces">Number of pieces in a shipment requiring marking or tagging.</param>
        public BOLRequestAccessorialsMarkDetails(int? pieces = default(int?))
        {
            this.Pieces = pieces;
        }
        
        /// <summary>
        /// Number of pieces in a shipment requiring marking or tagging
        /// </summary>
        /// <value>Number of pieces in a shipment requiring marking or tagging</value>
        [DataMember(Name="pieces", EmitDefaultValue=false)]
        public int? Pieces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequestAccessorialsMarkDetails {\n");
            sb.Append("  Pieces: ").Append(Pieces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequestAccessorialsMarkDetails);
        }

        /// <summary>
        /// Returns true if BOLRequestAccessorialsMarkDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequestAccessorialsMarkDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequestAccessorialsMarkDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pieces == input.Pieces ||
                    (this.Pieces != null &&
                    this.Pieces.Equals(input.Pieces))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pieces != null)
                    hashCode = hashCode * 59 + this.Pieces.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

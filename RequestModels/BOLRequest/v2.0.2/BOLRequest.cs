/* 
 * Electronic Bill Of Lading Service
 *
 * This document provides an electronic Bill of Lading (eBOL). The eBOL is a legal document that provides a contract between the shipper, carrier and consignee stating what goods are being shipped, where the shipment is coming from and where it’s headed to. “Pro” number is the unique identifier for the document for update and delete functions.
 *
 * OpenAPI spec version: 2.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace dotnet_example.RequestModels.BOL.v202
{
    /// <summary>
    /// Objects and/or attributes that are required are indicated by a _**red asterisk**_*. For those that are conditionally required, it will be indicated within their description, including the condition in which they are required.
    /// </summary>
    [DataContract]
        public partial class BOLRequest :  IEquatable<BOLRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BOLRequest" /> class.
        /// </summary>
        /// <param name="bol">bol (required).</param>
        /// <param name="version">Indicates which minor version of the Digital LTL Council Bill of Lading spec you are consuming  Valid values: 1.0, 1.1, 2.0.0, 2.0.1, 2.0.2  (required).</param>
        /// <param name="images">images.</param>
        /// <param name="notifications">include if you want notifications of shipment movements by text message or email.</param>
        /// <param name="referenceNumbers">referenceNumbers.</param>
        /// <param name="payment">payment (required).</param>
        /// <param name="commodities">commodities (required).</param>
        /// <param name="shipmentTotals">shipmentTotals.</param>
        /// <param name="accessorials">accessorials.</param>
        /// <param name="origin">origin (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="billTo">billTo (required).</param>
        /// <param name="customsBroker">customsBroker.</param>
        public BOLRequest(
            BOLRequestBol bol, 
            string version, 
            BOLRequestImages images,
            List<BOLRequestNotifications> notifications, 
            BOLRequestReferenceNumbers referenceNumbers, 
            BOLRequestPayment payment, 
            BOLRequestCommodities commodities, 
            BOLRequestShipmentTotals shipmentTotals, 
            BOLRequestAccessorials accessorials, 
            BOLRequestOrigin origin, 
            BOLRequestDestination destination, 
            BOLRequestBillTo billTo, 
            BOLRequestCustomsBroker customsBroker
        )
        {
            // to ensure "bol" is required (not null)
            if (bol == null)
            {
                throw new InvalidDataException("bol is a required property for BOLRequest and cannot be null");
            }
            else
            {
                this.Bol = bol;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for BOLRequest and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "payment" is required (not null)
            if (payment == null)
            {
                throw new InvalidDataException("payment is a required property for BOLRequest and cannot be null");
            }
            else
            {
                this.Payment = payment;
            }
            // to ensure "commodities" is required (not null)
            if (commodities == null)
            {
                throw new InvalidDataException("commodities is a required property for BOLRequest and cannot be null");
            }
            else
            {
                this.Commodities = commodities;
            }
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new InvalidDataException("origin is a required property for BOLRequest and cannot be null");
            }
            else
            {
                this.Origin = origin;
            }
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new InvalidDataException("destination is a required property for BOLRequest and cannot be null");
            }
            else
            {
                this.Destination = destination;
            }
            // to ensure "billTo" is required (not null)
            if (billTo == null)
            {
                throw new InvalidDataException("billTo is a required property for BOLRequest and cannot be null");
            }
            else
            {
                this.BillTo = billTo;
            }
            this.Images = images;
            this.Notifications = notifications;
            this.ReferenceNumbers = referenceNumbers;
            this.ShipmentTotals = shipmentTotals;
            this.Accessorials = accessorials;
            this.CustomsBroker = customsBroker;
        }
        
        /// <summary>
        /// Gets or Sets Bol
        /// </summary>
        [DataMember(Name="bol", EmitDefaultValue=false)]
        public BOLRequestBol Bol { get; set; }

        /// <summary>
        /// Indicates which minor version of the Digital LTL Council Bill of Lading spec you are consuming  Valid values: 1.0, 1.1, 2.0.0, 2.0.1, 2.0.2 
        /// </summary>
        /// <value>Indicates which minor version of the Digital LTL Council Bill of Lading spec you are consuming  Valid values: 1.0, 1.1, 2.0.0, 2.0.1, 2.0.2 </value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public BOLRequestImages Images { get; set; }

        /// <summary>
        /// include if you want notifications of shipment movements by text message or email
        /// </summary>
        /// <value>include if you want notifications of shipment movements by text message or email</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public List<BOLRequestNotifications> Notifications { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumbers
        /// </summary>
        [DataMember(Name="referenceNumbers", EmitDefaultValue=false)]
        public BOLRequestReferenceNumbers ReferenceNumbers { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name="payment", EmitDefaultValue=false)]
        public BOLRequestPayment Payment { get; set; }

        /// <summary>
        /// Gets or Sets Commodities
        /// </summary>
        [DataMember(Name="commodities", EmitDefaultValue=false)]
        public BOLRequestCommodities Commodities { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentTotals
        /// </summary>
        [DataMember(Name="shipmentTotals", EmitDefaultValue=false)]
        public BOLRequestShipmentTotals ShipmentTotals { get; set; }

        /// <summary>
        /// Gets or Sets Accessorials
        /// </summary>
        [DataMember(Name="accessorials", EmitDefaultValue=false)]
        public BOLRequestAccessorials Accessorials { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public BOLRequestOrigin Origin { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public BOLRequestDestination Destination { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name="billTo", EmitDefaultValue=false)]
        public BOLRequestBillTo BillTo { get; set; }

        /// <summary>
        /// Gets or Sets CustomsBroker
        /// </summary>
        [DataMember(Name="customsBroker", EmitDefaultValue=false)]
        public BOLRequestCustomsBroker CustomsBroker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BOLRequest {\n");
            sb.Append("  Bol: ").Append(Bol).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  ReferenceNumbers: ").Append(ReferenceNumbers).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Commodities: ").Append(Commodities).Append("\n");
            sb.Append("  ShipmentTotals: ").Append(ShipmentTotals).Append("\n");
            sb.Append("  Accessorials: ").Append(Accessorials).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  CustomsBroker: ").Append(CustomsBroker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BOLRequest);
        }

        /// <summary>
        /// Returns true if BOLRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BOLRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BOLRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bol == input.Bol ||
                    (this.Bol != null &&
                    this.Bol.Equals(input.Bol))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Images == input.Images ||
                    (this.Images != null &&
                    this.Images.Equals(input.Images))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.ReferenceNumbers == input.ReferenceNumbers ||
                    (this.ReferenceNumbers != null &&
                    this.ReferenceNumbers.Equals(input.ReferenceNumbers))
                ) && 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                ) && 
                (
                    this.Commodities == input.Commodities ||
                    (this.Commodities != null &&
                    this.Commodities.Equals(input.Commodities))
                ) && 
                (
                    this.ShipmentTotals == input.ShipmentTotals ||
                    (this.ShipmentTotals != null &&
                    this.ShipmentTotals.Equals(input.ShipmentTotals))
                ) && 
                (
                    this.Accessorials == input.Accessorials ||
                    (this.Accessorials != null &&
                    this.Accessorials.Equals(input.Accessorials))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.CustomsBroker == input.CustomsBroker ||
                    (this.CustomsBroker != null &&
                    this.CustomsBroker.Equals(input.CustomsBroker))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bol != null)
                    hashCode = hashCode * 59 + this.Bol.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.ReferenceNumbers != null)
                    hashCode = hashCode * 59 + this.ReferenceNumbers.GetHashCode();
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                if (this.Commodities != null)
                    hashCode = hashCode * 59 + this.Commodities.GetHashCode();
                if (this.ShipmentTotals != null)
                    hashCode = hashCode * 59 + this.ShipmentTotals.GetHashCode();
                if (this.Accessorials != null)
                    hashCode = hashCode * 59 + this.Accessorials.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.BillTo != null)
                    hashCode = hashCode * 59 + this.BillTo.GetHashCode();
                if (this.CustomsBroker != null)
                    hashCode = hashCode * 59 + this.CustomsBroker.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
